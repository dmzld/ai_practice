# -*- coding: utf-8 -*-
"""CIFAR_10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OULew2h8_JQrDUmUPn0_ijcMXdQ-SgMx
"""

import keras
from keras.models import Sequential
from keras.utils import np_utils
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization
from keras.layers import Conv2D, MaxPooling2D
from keras.datasets import cifar10
from keras import regularizers, optimizers
from keras.callbacks import LearningRateScheduler
import numpy as np

def lr_schedule(epoch):
    lrate = 0.001
    if epoch > 75:
        lrate = 0.0005
    if epoch > 100:
        lrate = 0.0003
    return lrate
 

(x_train, y_train) , (x_test, y_test) = cifar10.load_data()
print("Raw Training dataset X : ", x_train.shape, x_train.dtype)
print("Raw Training dataset Y : ", y_train.shape, y_train.dtype)

def cifar10_extract(x_train, y_train, target_label):
  target_instance = y_train == target_label
  target_instance = target_instance.reshape(target_instance.size)
  
  x_target = x_train[target_instance]
  y_target = np.full((5000,1),target_label)
  
  return (x_target[:1000], y_target[:1000])

def cifar10_merge_and_shuffle(x_train, y_train):
  (real_x_train, real_y_train) = cifar10_extract(x_train,y_train,0)
  for i in range(1,10):
    real_x_train = np.concatenate((real_x_train,(cifar10_extract(x_train, y_train, i))[0]), axis =0)
    real_y_train = np.concatenate((real_y_train,(cifar10_extract(x_train, y_train, i))[1]), axis =0)
  s = np.arange(real_x_train.shape[0])
  np.random.shuffle(s)
  real_x_train = real_x_train[s]
  real_y_train = real_y_train[s]
  return (real_x_train, real_y_train)


(x_train, y_train) = cifar10_merge_and_shuffle(x_train, y_train)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
print("Changed Training dataset X: ", x_train.shape, x_train.dtype)
print("Changed Training dataset Y: ", y_train.shape, y_train.dtype)

num_classes = 10
y_train = np_utils.to_categorical(y_train, num_classes)
y_test = np_utils.to_categorical(y_test,num_classes)

# Normalization
mean = np.mean(x_train,axis=(0,1,2,3))
std = np.std(x_train,axis=(0,1,2,3))
x_train = (x_train-mean)/(std+1e-7)
x_test = (x_test-mean)/(std+1e-7)

#Data augmentation

datagen = ImageDataGenerator(
    featurewise_center = False,
    samplewise_center = False,
    featurewise_std_normalization = False,
    samplewise_std_normalization = False,
    zca_whitening = False,
    rotation_range = 15,
    width_shift_range = 0.1,
    height_shift_range =0.1,
    horizontal_flip = True,
    vertical_flip = False
    )
datagen.fit(x_train)


weight_decay = 1e-4
model = Sequential()
model.add(Conv2D(32, (3,3), padding = 'same', kernel_regularizer = regularizers.l2(weight_decay),
                  input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(BatchNormalization())

model.add(Conv2D(32, (3,3), padding = 'same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

model.add(Conv2D(64, (3,3), padding = 'same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())

model.add(Conv2D(64, (3,3), padding = 'same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.3))

model.add(Conv2D(128, (3,3), padding = 'same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())

model.add(Conv2D(128, (3,3), padding = 'same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.4))

#Add multiple hidden layer
model.add(Flatten())
model.add(Dense(num_classes,activation ='softmax'))

model.summary()


#Parameters
batch_size = 64
epochs = 125
learning_rate = 0.001 # epoch > 75 : 0.0005, epoch > 100  : 0.003

opt_rms = keras.optimizers.rmsprop(lr = learning_rate, decay = 1e-6)

model.compile(loss = 'categorical_crossentropy',
             optimizer = opt_rms,
             metrics = ['accuracy'])

model.fit_generator(datagen.flow(x_train, y_train, batch_size = batch_size),
                   steps_per_epoch=x_train.shape[0] // batch_size, epochs=epochs,
                   verbose = 1, validation_data=(x_test, y_test),callbacks=[LearningRateScheduler(lr_schedule)])

#After Training
scores = model.evaluate(x_test, y_test, batch_size =128, verbose = 1)
print('\nTest result : Accuracy: %.3f loss: %.3f' % (scores[1]*100,scores[0]))