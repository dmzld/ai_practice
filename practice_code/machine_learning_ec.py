# -*- coding: utf-8 -*-
"""머신러닝야학.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h9-oHWCmDyxsQ8OyEgOfZ1ZZUC5CDcqI
"""

import pandas as pd
import tensorflow as tf

# 데이터준비
파일경로1 = "https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/lemonade.csv"
레모네이드 = pd.read_csv(파일경로1)

파일경로2 = "https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/boston.csv"
보스턴 = pd.read_csv(파일경로2)

파일경로3 = "https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/iris.csv"
아이리스 = pd.read_csv(파일경로3)

print(레모네이드.shape)
print(보스턴.shape)
print(아이리스.shape)

print(레모네이드.columns)
print(보스턴.columns)
print(아이리스.columns)

독립1 = 레모네이드[['온도']]
종속1 = 레모네이드[['판매량']]
print(독립1.shape, 종속1.shape)

독립2 = 보스턴[['crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis', 'rad', 'tax',
       'ptratio', 'b', 'lstat']]
종속2 = 보스턴[['medv']]
print(독립2.shape, 종속2.shape)

독립3 = 아이리스[['꽃잎길이', '꽃잎폭', '꽃받침길이', '꽃받침폭', '품종']]
종속3 = 아이리스[['품종']]
print(독립3.shape, 종속3.shape)

보스턴.head()

레모네이드.head()

# 회귀
# 모델 만들기
# shape=[1], Dense(1) : 독립변수, 종속변수가 각각 1개이기 때문에
X = tf.keras.layers.Input(shape=[1])
Y = tf.keras.layers.Dense(1)(X)
model = tf.keras.models.Model(X, Y)
model.compile(loss='mse')

model.fit(독립1, 종속1, epochs=10)

# 모델을 이용
model.predict([[15]])

X = tf.keras.layers.Input(shape=[13])
H1 = tf.keras.layers.Dense(10, activation='swish')(X)
H2 = tf.keras.layers.Dense(5, activation='swish')(H1)
Y = tf.keras.layers.Dense(1)(H2)
model2 = tf.keras.models.Model(X, Y)
model2.compile(loss='mse')
model2.fit(독립2, 종속2, epochs=100)

model2.fit(독립2, 종속2, epochs=10)

model2.predict(독립2[0:5])

종속2[0:5]

# 모델의 수식 확인
model2.get_weights()

# 분류
아이리스 = pd.read_csv("https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/iris.csv")

# onehot encoding
인코딩 = pd.get_dummies(아이리스)
인코딩.head()

독립3 = 인코딩[['꽃잎길이', '꽃잎폭', '꽃받침길이', '꽃받침폭']]
종속3 = 인코딩[['품종_setosa','품종_versicolor','품종_virginica']]

X = tf.keras.layers.Input(shape=4)
# onehot encoding으로 종속변수가 3개가 됨(data에 따라 개수는 달라짐)
Y = tf.keras.layers.Dense(3, activation='softmax')(X)
model3 = tf.keras.models.Model(X, Y)
model3.compile(loss='categorical_crossentropy', metrics='accuracy')

model3.fit(독립3, 종속3, epochs=100)

model3.predict(독립3[0:5])

print(종속3[0:5])

